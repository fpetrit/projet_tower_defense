/ SYNTAXE DU FICHIER
/
/ Les lignes commençant par '/' sont ignorées.
/
/ Chaque entrée est un bloc de plusieurs lignes.
/ Les blocs sont séparés par au moins une ligne vide.
/ Composition d'un bloc :
/
/ <NOM_DE_LA_TOURELLE>
/ <ABREVIATION>
/ <PRIX>
/ <POINTS_DE_VIE>
/ <TYPE_DEGATS>
/ <TYPE_DEPLACEMENT>
/
/
/ NOM_DE_LA_TOURELLE : chaîne de caractères unique pouvant contenir des espaces.
/ Pas de guillemets, apostrophes, caractères pouvant poser problème.
/
/ ABREVIATION : un seul caractère unique.
/ Permet de réprésenter facilement la tourelle surtout en ascii.
/
/ PRIX : un int.
/
/ POINTS_DE_VIE : un int, points de vie maximum et présent initialement.
/
/ TYPE_DEGATS : entier positif et int, id qui personnalise le comportement de inflict_damage
/
/ TYPE_DEPLACEMENT : entier positif et int, id qui personnalise le comportement de move
/
/
/ Les caractéristiques ci-dessus sont définies pour toutes les tourelles.
/ Le membre de structure Tourelle.stats permet de personnaliser une tourelle au-delà de son type.
/ Il doit être interprété qu'avec la connaissance du type de la tourelle.
/
/ Un entier positif qui rentre dans un int sera assigné à chaque tourelle du fichier dans leur ordre d'apparition en commençant à 0.
/ Il sera stocké pour chaque instance de Tourelle dans Tourelle.type.
/ Il permet de retrouver facilement les caractériques de base, initiales, pour chaque type, qui sont chargées en mémoire vive au lancemement du programme.
/ Il sert à personaliser le comportement des fonctions de gestion du tour (principalement : inflict_damage, move, pourquoi pas les graphismes)
/ pour chaque type de tourelle.
/ Si le type de dommage ou de déplacement de la tourelle est propre elle-même, il suffit de mettre dans ces champs son id (sa place relative dans le fichier,
/ partant de 0, unique).
/



TOURELLE DE BASE
T
0
20
100

